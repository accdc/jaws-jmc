<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>JMC object</TITLE>
</HEAD>
<BODY TEXT="#000000" LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<B><I><FONT FACE="Arial"><P ALIGN="CENTER">&nbsp;</P>
<P ALIGN="CENTER">Jmc object’s methods, properties and events list</P>
<P ALIGN="CENTER">&nbsp;</P>
</B><P ALIGN="RIGHT">All samples here are in Jscript language.</P>
</I><P>Jmc object properties</FONT><FONT SIZE=2> </P>

<UL>

<UL>
<B><LI>IsConnected </B>- read-only property. True if JMC connected to MUD server right now. False if not </LI>
<B><LI>Event</B> – contains jmc object event’s parameter. For “Incoming” and “Input” events contains currently processing line. Also, its contains current line while you calls script from </FONT><A HREF="action.html">#action</A><FONT SIZE=2> command </LI>
<B><LI>Profile</B> – returns name of current profile. Read-only </LI>
<B><LI>CommandChar</B> – returns TinTin commandchar. Read-only. </LI></UL>
</UL>

</FONT><FONT FACE="Arial"><P>Jmc object methods</FONT><FONT SIZE=2> </P>

<UL>

<UL>
<B><LI>[ShowMe (text, [color]) </B>- displays text on JMC main screen. Second parameter is options. Format of [color] string same as in the </FONT><A HREF="highlight.html">#highlight</A><FONT SIZE=2> command. Also, look at </FONT><A HREF="showme.html">#showme</A><FONT SIZE=2> command. Sample: jmc.Showme(“aaa”) jmc.Showme(“aaa”, “red”) </LI>
<B><LI>Send(text) </B>- send text directly to MUD. Without any processing by JMC TinTin aliases. </LI>
<B><LI>Beep() </B>- makes a boop. Same as </FONT><A HREF="bell.html">#bell</A><FONT SIZE=2> command. </LI>
<B><LI>Parse(command_text) </B></FONT>– Parse text by JMC. Text will be parsed by same way as a text typed in commandline. So, every JMC commands processing allowed here . Samples: jmc.Parse(“#alias pk {#var taget}”) jmc.Parse (“kill Pnuk”) jmc.Parse(“#scri MayProc()”) </LI>
<B><FONT SIZE=2><LI>Output(text, [color]) </B>- display text into “output” window of JMC. Second parametr is optional. Look at #output and </FONT><A HREF="highlight.html">#highlight</A><FONT SIZE=2> for color format. Samples: jmc.Output(“Wake up ! Time to kill goblins!!!”) jmc.Output(“Death to Shesh(”, “red”) </LI>
<B><LI>SetTimer([ID, Interval, LONG preInterval) </B>-Set up ne timer. After you calls this function JMC will generate «Timer» event every Interval/10 seconds and generate «PreTimer» event every PreInterval/10 seconds. ID parameter needed to separate differet timer events. Timer/Pretimer events recives ID as a paramer, so you may have few timer in one time. Calling this function with same ID will reset timer and fource it to start new interval. Samples: </LI>

<UL>
<B><LI>Jmc.SetTimer(1, 600) </B></FONT>– JMC will generate Timer event every 60 seconds. “Timer” event gets 1 as a parameter. </LI>
<B><FONT SIZE=2><LI>Jmc.SetTimer(2, 300, 50)</B> – JMC wqill generate event “Timer” every 30 seconds with 2 as a parameter and will generate “PreTimer” event in 5 seconds before 30 seconds interval with 2 as parameter. Now you able to catch ticks every 60 seconds and catch half-tick perionds every 30 seconds. </LI></UL>

<B><LI>KillTimer([ID) </B></FONT>– kill timer defined by ID. JMC stops to generate timer/Pretimer events for this timer ID. </LI>
<B><FONT SIZE=2><LI>Eval(text) </B>- One of the most powerful JMC method. Its alolows you to parse csript code from script code. Folloing sample demonstrates «include» implementation by this method:</LI></UL>
</UL>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>

<P>var FileSystem = new ActiveXObject("Scripting.FileSystemObject");</P>
<P>var ForReading = 1;</P>
<P>var ForWriting = 2;</P>
<P>var ForAppending = 8;</P>
<P>&nbsp;</P>
<P>function _include(sFileName)</P>
<P>{</P><DIR>
<DIR>

<P>var Stream = FileSystem.OpenTextFile(sFileName, ForReading);</P>
<P>jmc.Eval(Stream.ReadAll());</P>
<P>Stream.Close();</P></DIR>
</DIR>

<P>}</P>
<B><P>&nbsp;</P></DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</DIR>


<UL>

<UL>
<LI>RegisterHandler(EventName, Code) </B></FONT>– this method is used for non Vbscipt languages. Only Vbscript language provides default support for events, generated by objects. In all other languages (like Jscript, PERL etc) you must call this method to receive events from JMC. Samples:</LI></UL>
</UL>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>
<DIR>

<FONT SIZE=2><P>Jmc.RegisterHandler(“Incoming” , “OnIncoming()”);</P>
<P>Jmc.RegisterHandler(“Timer”, “OnTimer()”);</P></DIR>
</DIR>
</DIR>
</DIR>
</DIR>
</DIR>


<UL>

<UL>
<B><LI>Connect(Address, Port)</B></FONT>- force JMC to connect to remote server. </LI>
<B><FONT SIZE=2><LI>DropEvent()</B></FONT>- in the “Incoming” and “Input” event force JMC to do not process line. Both events fires BEFORE JMC parsing,. I.e. every string coming from the MUD firest “Incoming” event, then process by JMC. If you call DropEvent while Incoming event this line will be gaged and will not process by JMC. For input strings JMC fires “Input” event. IF DropEvent called this input will not by processed or sent to MUD.. Also, if you call this method while execute action, it fource JMC to gag this line and don’t display it. Sample: #action {Pnuk standing here) {<A HREF="showme.html">#showme</A> Damned goblin standing here!!!;<A HREF="script.htm">#scri</A> jmc.DropEvent()} See also: #drop command. </LI>
<B><FONT SIZE=2><LI>Disconnect()</B> – disconnect JMC from remote server. </LI>
<B><LI>SetHotkey([Key, Command)</B> – defines new hotkey in JMC. Key format is same as </FONT><A HREF="hotkey.html">#hotkey</A><FONT SIZE=2> command </LI>
<B><LI>SetStatus([StatusNum, Text, bstrColor)</B> – set text to the status line cell. Same as #status comamnd </LI>
<B><LI>SetVar(VarName, Value, bGlobal) </B></FONT>– set JMC variable value. Sample: jmc.SetVar(“food”, “bread”) jmc.SetVar(“weapon”, “sword”, true). Lok at <A HREF="variable.html">#variable</A> command. </LI>
<B><FONT SIZE=2><LI>GetVar(VarName,) </B>– returns a value of JMC variable. Sample: food = jmc.getvar(“food”);</LI></UL>
</UL>

<B><P>&nbsp;</P>
</B></FONT><FONT FACE="Arial"><P>Jmc object events</P>
</FONT><B><FONT SIZE=2><P>Connected</B> – Fires every time JMC connected to remote host. No parameters.</P>
<B><P>ConnectLost </B> - Fires every time JMC loose connect to remote host. No parameters.</P>
<B><P>Incoming</B> – Fires on every string arrives from the MUD. <B>Event </B></FONT>property contains string (with ANSY sumbols)</P>
<B><FONT SIZE=2><P>Input </B> - fires on every string typed by user in commandline. <B>Event</B> property contains string.</P>
<B><P>Timer </B>– fires then timer interval, defined by <B>SetTimer </B> method elapsed. <B>Event</B></FONT> property contains timer ID.</P>
<B><FONT SIZE=2><P>PreTimer</B> - fires in PreInterval/10 seconds before timer interval, defined by <B>SetTimer </B> method elapsed. <B>Event</B></FONT> property contains timer ID.</P>
<B><FONT SIZE=2><P>Disconnected</B> – fires then connection to remote host lost, by user’s actions (</FONT><A HREF="zap.html">#zap</A><FONT SIZE=2> command etc)</P>
<B><P>Load</B> – fires then script engine restarting (loading new profile or “Script-&gt;Reload script” menu item used)</P>
<B><P>Unload - </B>fires then script engine destroys(unloading profile or “Script-&gt;Reload script” menu item used)</P>
</FONT></BODY>
</HTML>
